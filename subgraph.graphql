type AddressResolver @entity {
  id: ID!
  exchange: Exchange!
}

type Exchange @entity {
  id: ID!
  ordersCount: BigInt!
  orderFillsCount: BigInt!
  ordersClaimedCount: BigInt!
  ordersCancelledCount: BigInt!
  makerVolume: BigInt!
  takerVolume: BigInt!
  totalUserActiveDays: BigInt!
}

type ContentFactory @entity {
  id: ID!
  contents: [Content!] @derivedFrom(field: "factory")
}

type ContentStatisticsManager @entity {
  id: ID!
  contentsCount: BigInt!
  assetsCount: BigInt!
  accountsCount: BigInt!
  uniqueAssetsCount: BigInt!
  w1TotalPoints: BigInt!
  w2TotalPoints: BigInt!
  w3TotalPoints: BigInt!
}

type Content @entity {
  id: ID!
  factory: ContentFactory!
  assetsCount: BigInt!
}

type Account @entity {
  id: ID!
  ordersCount: BigInt!
  orderFillsCount: BigInt!
  cancelledOrdersCount: BigInt!
  claimedOrdersCount: BigInt!
  makerVolume: BigInt!
  takerVolume: BigInt!
  uniqueAssetsCount: BigInt!
  daysActive: BigInt!
  lastActiveDate: BigInt!
  contractsDeployedCount: BigInt!
  assetsDeployedCount: BigInt!
  week1: WeeklyEventParticipation
  week2: WeeklyEventParticipation
  week3: WeeklyEventParticipation
}

type WeeklyEventParticipation @entity {
    id: ID!
    week: Int!
    points: BigInt!
    bonus: Boolean! 
    disqualified: Boolean!
}

type Order @entity {
  id: ID!
  exchange: Exchange!
  asset: Asset!
  owner: Account!
  type: OrderType!
  price: BigInt!
  amountOrdered: BigInt!
  amountFilled: BigInt!
  amountClaimed: BigInt!
  status: OrderStatus!
}

enum OrderType {
  Buy
  Sell
}

enum OrderStatus {
  Ready
  PartiallyFilled
  Filled
  Cancelled
  Claimed
}

type Asset @entity {
  id: ID!
  tokenId: BigInt!
  parentContract: Content!
  orders: [Order!] @derivedFrom(field: "asset")
}

type AssetBalance @entity {
  id: ID!
  asset: Asset!
  owner: Account!
  amount: BigInt!
}